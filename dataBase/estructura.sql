-- MySQL Script generated by MySQL Workbench
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema economiaf
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `economiaf`;
USE `economiaf`;

-- -----------------------------------------------------
-- Table `economiaf`.`Roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`roles` (
  `id_rol` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_rol` VARCHAR(45) NOT NULL UNIQUE,
  `descripcion_rol` VARCHAR(100) NULL,
  `estado_rol` ENUM('activo','inactivo') NOT NULL DEFAULT 'activo',
  PRIMARY KEY (`id_rol`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `economiaf`.`Usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`usuarios` (
  `id_usuario` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_usuario` VARCHAR(45) NOT NULL,
  `apellido_usuario` VARCHAR(45) NOT NULL,
  `username_usuario` VARCHAR(45) NOT NULL UNIQUE,
  `claveHash_usuario` VARCHAR(255) NOT NULL,
  `id_rol` INT UNSIGNED NOT NULL,
  `estado_usuario` ENUM('activo','inactivo') NOT NULL DEFAULT 'activo',
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_id_rol_usuario_idx` (`id_rol` ASC),
  CONSTRAINT `fk_id_rol_usuario`
    FOREIGN KEY (`id_rol`)
    REFERENCES `economiaf`.`roles` (`id_rol`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `economiaf`.`Permisos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`permisos` (
  `id_permiso` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_permiso` VARCHAR(45) NOT NULL UNIQUE,
  PRIMARY KEY (`id_permiso`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `economiaf`.`Categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`categorias` (
  `id_categoria` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_categoria` VARCHAR(45) NOT NULL,
  `tipo_categoria` ENUM('ingreso','egreso') NOT NULL,
  PRIMARY KEY (`id_categoria`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `economiaf`.`Registros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`registros` (
  `id_registro` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_registro` VARCHAR(45) NULL,
  `tipo_registro` ENUM('ingreso','egreso') NOT NULL,
  `metodo_registro` ENUM('tarjeta','efectivo','transferencia') NULL,
  `fecha_registro` DATETIME NOT NULL,
  `fecha_accion` DATETIME NOT NULL,
  `valor_registro` DECIMAL(10,2) NOT NULL,
  `estado_registro` ENUM('activo','anulado') NOT NULL DEFAULT 'activo',
  `id_usuario` INT UNSIGNED NOT NULL,
  `id_categoria` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_registro`),
  INDEX `fk_id_usuario_registros_idx` (`id_usuario` ASC),
  INDEX `fk_id_categoria_registros_idx` (`id_categoria` ASC),
  CONSTRAINT `fk_id_usuario_registros`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `economiaf`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_id_categoria_registros`
    FOREIGN KEY (`id_categoria`)
    REFERENCES `economiaf`.`categorias` (`id_categoria`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `economiaf`.`Autorizaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`autorizaciones` (
  `id_rol` INT UNSIGNED NOT NULL,
  `id_permiso` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_rol`, `id_permiso`),
  CONSTRAINT `fk_id_rol_autorizacion`
    FOREIGN KEY (`id_rol`)
    REFERENCES `economiaf`.`roles` (`id_rol`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_id_permiso_autorizacion`
    FOREIGN KEY (`id_permiso`)
    REFERENCES `economiaf`.`permisos` (`id_permiso`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Tabla Auditoría
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `economiaf`.`auditoria` (
  `id_auditoria` INT NOT NULL AUTO_INCREMENT,
  `accion` VARCHAR(45) NOT NULL, 
  `tabla_afectada` VARCHAR(45) NOT NULL, -- Tabla en la que se realizó la acción
  `id_registro_afectado` INT NULL, -- ID del registro afectado (si aplica)
  `id_usuario` INT UNSIGNED NOT NULL, -- Usuario que realizó la acción
  `fecha_hora` DATETIME NOT NULL, -- Fecha y hora de la acción
  `detalles` TEXT NULL, -- Detalles adicionales (por ejemplo, valores antiguos y nuevos)
  PRIMARY KEY (`id_auditoria`),
  INDEX `fk_id_usuario_auditoria_idx` (`id_usuario` ASC),
  CONSTRAINT `fk_id_usuario_auditoria`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `economiaf`.`usuarios` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

INSERT INTO permisos (id_permiso, nombre_permiso) VALUES
-- Funciones INSERT
(1, 'Agregar categoría'),  -- Solo ADMIN
(2, 'Agregar gastos'),
(3, 'Agregar ingresos'),
(4, 'Crear roles'),          -- Solo ADMIN
(5, 'Crear usuarios'),       -- Solo ADMIN

-- Funciones UPDATE (cambiar estado)
(6, 'Anular gastos'),
(7, 'Anular ingresos'),
(8, 'Desactivar categoría'),
(9, 'Desactivar roles'),
(10, 'Desactivar usuarios'),

-- Funciones UPDATE (editar registro)
(11, 'Editar categoría'),
(12, 'Editar gastos'),
(13, 'Editar ingresos'),
(14, 'Editar roles'),
(15, 'Editar usuarios'),

-- Reportes
(16, 'Generar reportes');

INSERT INTO roles (nombre_rol, descripcion_rol, estado_rol) 
VALUES ('Administrador', 'Rol administrador con permisos completos', 'activo');

INSERT INTO usuarios (nombre_usuario, apellido_usuario, username_usuario, claveHash_usuario, id_rol, estado_usuario)
VALUES ("Kleber", "Aguilar", "1234567890","$2y$10$ciGgtxcUUAWsqDNT5n9f3uIFLrmJdr6ZJvXyGiv0cvO6U/CO6EtiS" , 1, 'activo');

INSERT INTO autorizaciones (id_rol, id_permiso) VALUES 
(1, 1),
(1, 2),
(1, 3),
(1, 4),
(1, 5),
(1, 6),
(1, 7),
(1, 8),
(1, 9),
(1, 10),
(1, 11),
(1, 12),
(1, 13),
(1, 14),
(1, 15),
(1, 16);

INSERT INTO categorias (id_categoria, nombre_categoria, tipo_categoria) VALUES
-- Ingresos
(1, 'Salario', 'ingreso'),
(2, 'Ventas Negocio', 'ingreso'),
(3, 'Trabajos Extra', 'ingreso'),
(4, 'Alquileres', 'ingreso'),
(5, 'Regalo', 'ingreso'),

-- Egresos (gastos)
(6, 'Servicios Básicos', 'egreso'),
(7, 'Vivienda', 'egreso'),
(8, 'Alimentación', 'egreso'),
(9, 'Transporte', 'egreso'),
(10, 'Educación', 'egreso'),
(11, 'Salud', 'egreso'),
(12, 'Vestimenta', 'egreso'),
(13, 'Entretenimiento', 'egreso'),
(14, 'Mascota', 'egreso'),
(15, 'Pagos Financieros', 'egreso');



DELIMITER $$

CREATE TRIGGER `Roles_Auditoria_Insert` AFTER INSERT ON `roles`
FOR EACH ROW
BEGIN
  INSERT INTO `auditoria` 
    (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
  VALUES 
    ('Crear', 'Roles', NEW.id_rol, @usuario_activo, NOW(), CONCAT('Nuevo rol creado: ', NEW.nombre_rol));
END$$

CREATE TRIGGER `Roles_Auditoria_Update` AFTER UPDATE ON `roles`
FOR EACH ROW
BEGIN
  INSERT INTO `auditoria` 
    (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
  VALUES 
    ('Actualizar', 'roles', NEW.id_rol, @usuario_activo, NOW(), CONCAT('Rol actualizado: ', NEW.nombre_rol));
END$$

-- Triggers para Registros
CREATE TRIGGER `Registros_Auditoria_Insert` AFTER INSERT ON `registros`
FOR EACH ROW
BEGIN
  INSERT INTO `auditoria` 
    (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
  VALUES 
    ('Crear', 'Registros', NEW.id_registro, @usuario_activo, NOW(), CONCAT('Nuevo registro creado: ', NEW.id_registro));
END$$

CREATE TRIGGER `Registros_Auditoria_Update` AFTER UPDATE ON `registros`
FOR EACH ROW
BEGIN
  INSERT INTO `auditoria` 
    (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
  VALUES 
    ('Actualizar', 'Registros', NEW.id_registro, @usuario_activo, NOW(), CONCAT('Registro actualizado: ', NEW.nombre_registro));
  
  IF OLD.estado_registro != NEW.estado_registro THEN  
    INSERT INTO `auditoria` 
      (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
    VALUES 
      ('Actualizar', 'Registros', NEW.id_registro, @usuario_activo, NOW(), CONCAT('Estado del registro actualizado: ', NEW.estado_registro));
  END IF;
END$$

-- Triggers para Usuarios
CREATE TRIGGER `Usuarios_Auditoria_Insert` AFTER INSERT ON `usuarios`
FOR EACH ROW
BEGIN
  INSERT INTO `auditoria` 
    (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
  VALUES 
    ('Crear', 'Usuarios', NEW.id_usuario, @usuario_activo, NOW(), 
     CONCAT('Nuevo usuario creado: ', NEW.nombre_usuario, ' ', NEW.apellido_usuario));
END$$

CREATE TRIGGER `Usuarios_Auditoria_Update_Rol` AFTER UPDATE ON `usuarios`
FOR EACH ROW
BEGIN
  IF OLD.id_rol != NEW.id_rol THEN
    INSERT INTO `auditoria` 
      (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
    VALUES 
      ('Actualizar', 'Usuarios', NEW.id_usuario, @usuario_activo, NOW(), 'Cambio de rol');
  END IF;
END$$

CREATE TRIGGER `Usuarios_Auditoria_Update_Estado` AFTER UPDATE ON `usuarios`
FOR EACH ROW
BEGIN
  IF OLD.estado_usuario != NEW.estado_usuario THEN
    INSERT INTO `auditoria` 
      (accion, tabla_afectada, id_registro_afectado, id_usuario, fecha_hora, detalles)
    VALUES 
      ('Actualizar', 'Usuarios', NEW.id_usuario, @usuario_activo, NOW(), CONCAT('Estado actualizado: ', NEW.estado_usuario));
  END IF;
END$$

DELIMITER ;
